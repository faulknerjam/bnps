{
    "contents" : "#' Extract latent process parameters and associated Bayesian credible intervals\n#'\n#' Extract theta (latent process) parameters from an object with posterior draws and associated Bayesian credible intervals.\n#' @param mfit An object containing posterior draws from a \\code{bnps} model fit or \\code{rstan::stan} model fit.  The object can be of class 'stanfit', 'array', 'matrix', or 'data.frame'.\n#' @param obstype Character string with the name of the probability distribution of the observations.  This controls the back-transformation of the process parameters.  Possible values for \\code{obstype} are 'normal', 'poisson', or 'binomial'.\n#' @param alpha Controls level for 100*(1-\\code{alpha})\\% Bayesian credible intervals. Values must be 0 < \\code{alpha} < 1.\n#' @return Returns a list with the posterior median and posterior (1-\\code{alpha}) quantiles of the theta parameter vector.\n#' @seealso rstan, rstan::as.array, rstan::as.matrix, rstan::as.data.frame\n#' @export\n\nextract_theta <- function(mfit, obstype=\"normal\",  alpha=0.05){\n\n  if (missing(mfit)) stop(\"Must specify object with posterior draws from a bnps or stan model fit.\")\n  if ( !(class(mfit)[1] %in% c(\"array\", \"matrix\", \"data.frame\", \"stanfit\") ) ) stop(\"Object must be of class 'stanfit', 'array', 'matrix', or 'data.frame'.  Object must be or be generated from a stan model fit object.\")\n  if ( !(obstype %in% c(\"normal\", \"poisson\", \"binomial\") ) ) stop(\"Argument 'obstype' must be 'normal', 'poisson', or 'binomial'.\")\n  if (!(0 < alpha & alpha < 1)) stop(\"Must specify 'alpha' between 0 and 1.\")\n\n  if (class(mfit)[1]==\"stanfit\") {\n  \t if (!requireNamespace(\"rstan\", quietly = TRUE)) {\n    \t\t\tstop(\"Package 'rstan' needed for this function to work. Please install it.\", call. = FALSE)\n  \t }\n  \ttmp.th <- rstan::extract(mfit, \"theta\")[[1]]\n  }\n  if (class(mfit)[1]==\"array\")  {\n    nca <- dim(mfit)[2]\n\t  tmp.th1 <- mfit[ , 1, ]\n\t  if (nca > 1){\n\t    for (jj in 2:nca){\n\t      tmp.th1 <- rbind(tmp.th1, mfit[ ,jj,])\n\t    }\n\t  }\n\t  tmp.th <- tmp.th1[ ,grep(x=dimnames(tmp.th1)[[2]], pattern=\"theta\")]\n  }\n  if (class(mfit)[1]==\"matrix\") tmp.th <- mfit[ , grep(x=colnames(mfit), pattern=\"theta\")]\n  if (class(mfit)[1]==\"data.frame\") tmp.th <- as.matrix(mfit[ , grep(x=names(mfit), pattern=\"theta\")])\n\n  plow <- alpha/2\n  phigh <- 1 - alpha/2\n\n  if (obstype==\"normal\"){\n   tmp.md <- apply(tmp.th, 2, median)\n   tmp.l <- apply(tmp.th, 2, quantile, probs=plow)\n   tmp.u <- apply(tmp.th, 2, quantile, probs=phigh)\n  }\n  if (obstype==\"poisson\"){\n   tmp.md <- exp(apply(tmp.th, 2, median))\n   tmp.l <- exp(apply(tmp.th, 2, quantile, probs=plow))\n   tmp.u <- exp(apply(tmp.th, 2, quantile, probs=phigh))\n  }\n  if (obstype==\"binomial\"){\n   tmp.md <- plogis(apply(tmp.th, 2, median))\n   tmp.l <- plogis(apply(tmp.th, 2, quantile, probs=plow))\n   tmp.u <- plogis(apply(tmp.th, 2, quantile, probs=phigh))\n  }\n   out <- list(postmed=tmp.md, bci.lower=tmp.l, bci.upper=tmp.u)\n   out\n\n}\n\n",
    "created" : 1450203098666.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2882381061",
    "id" : "3208D308",
    "lastKnownWriteTime" : 1450205224,
    "path" : "~/Classes/Research/packages/bnps/R/extract_theta.r",
    "project_path" : "R/extract_theta.r",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}